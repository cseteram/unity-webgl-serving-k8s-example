name: Build project and deploy

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  build-and-push-image:
    name: Build and push the image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3
      - name: Setup cache
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      - name: Get runner's uid and gid
        id: runner-info
        run: |
          echo "::set-output name=uid::$(id -u)"
          echo "::set-output name=gid::$(id -g)"
      - name: Build
        uses: game-ci/unity-builder@v2.0.4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          chownFilesTo: ${{ steps.runner-info.outputs.uid }}:${{ steps.runner-info.outputs.gid }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Build-WebGL
          path: build/WebGL
          retention-days: 14
      - name: Sign in to the GitHub container registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Docker build and push
        working-directory: build/WebGL/WebGL
        run: |
          cp ${{ github.workspace }}/Dockerfiles/WebGL.Dockerfile Dockerfile
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
        env:
          IMAGE_NAME: ghcr.io/cseteram/unity-webgl-nginx:latest

  deploy-to-k8s:
    name: Deploy to k8s
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          mkdir -p ~/.local/bin/
          mv ./kubectl ~/.local/bin/kubectl
          echo "${HOME}/.local/bin" >> ${GITHUB_PATH}
      - name: Configure cluster access
        run: |
          mkdir -p ~/.kube
          echo "${KUBECONFIG_CONTENT}" > ~/.kube/config
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG_CONTENT }}
      - name: Report current status
        run: |
          kubectl get -n unity-webgl-k8s all
      - name: Deploy to the kubernetes cluster
        working-directory: .kube/
        run: |
          # First, create the namespace
          kubectl apply -f namespace.yml

          # Setup a certificate
          # See 'https://github.com/cloudflare/origin-ca-issuer' for details
          kubectl create secret generic \
            --dry-run=client \
            -n unity-webgl-k8s service-key \
            --from-literal key=${{ secrets.CLOUDFLARE_ORIGIN_CA_KEY }} \
            -oyaml > service-key.yml
          kubectl apply -f service-key.yml -f issuer.yml -f certificate.yml

          # Deploy the service to a k8s cluster
          kubectl apply -f deploy.yml

          # Rolling restart pods if needed
          kubectl -n unity-webgl-k8s rollout restart deployment unity-webgl
